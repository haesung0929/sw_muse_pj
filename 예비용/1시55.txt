from dotenv import load_dotenv

load_dotenv()

from flask import Flask, send_file, render_template, request, jsonify
import os
import tempfile
import requests
import logging
logging.basicConfig(level=logging.DEBUG)
from openai import OpenAI
from music21 import stream, note, midi, converter, environment, metadata, meter, key, tempo, expressions
import pretty_midi
from gtts import gTTS

# MuseScore 경로 설정
us = environment.UserSettings()
us['musicxmlPath'] = 'C:/Program Files/MuseScore 4/bin/MuseScore4.exe'
us['musescoreDirectPNGPath'] = 'C:/Program Files/MuseScore 4/bin/MuseScore4.exe'

# Flask 앱 초기화
app = Flask(__name__)

# OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# HuggingFace MusicGen Inference API
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
MUSICGEN_API_URL = "https://api-inference.huggingface.co/models/facebook/musicgen-large"
HEADERS = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}

print("✅ HUGGINGFACE_API_KEY:", HUGGINGFACE_API_KEY)


@app.route("/")
def index():
    return render_template("index.html")

# ✅ 1. GPT로 가사 생성
@app.route("/generate-lyrics", methods=["POST"])
def generate_lyrics():
    try:
        topic = request.json.get("topic", "사랑의 노래")
        prompt = f"'{topic}'이라는 주제로 한국어 노래 가사를 써줘. 4줄 이상."
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        lyrics = response.choices[0].message.content.strip()
        return jsonify({"lyrics": lyrics})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ✅ 2. 가사 기반 음악 생성 (HuggingFace MusicGen)
@app.route("/generate-melody", methods=["POST"])
def generate_melody():
    try:
        lyrics = request.json.get("lyrics", "봄날의 바람")
        response = requests.post(
            MUSICGEN_API_URL,
            headers=HEADERS,
            json={"inputs": lyrics}
        )
        if response.status_code != 200:
            return jsonify({"error": response.text}), 500

        audio_url = response.json()["audio"][0]["url"]
        audio_data = requests.get(audio_url).content

        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as tmp_file:
            tmp_file.write(audio_data)
            tmp_path = tmp_file.name

        return send_file(tmp_path, mimetype="audio/mp3", as_attachment=True, download_name="generated_song.mp3")
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ✅ 3. 악보 출력 (예시: 고정된 악보)
@app.route("/score", methods=["GET"])
def score():
    try:
        melody = stream.Stream()
        melody.append(note.Note('C4', quarterLength=1.0))
        melody.append(note.Note('D4', quarterLength=1.0))
        melody.append(note.Note('E4', quarterLength=1.0))
        melody.append(note.Rest(quarterLength=1.0))
        melody.append(note.Note('G4', quarterLength=2.0))

        png_path = tempfile.mktemp(suffix=".png")
        melody.write('musicxml.png', fp=png_path)
        return send_file(png_path, mimetype="image/png")
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ✅ 4. TTS (가사 낭독)
@app.route("/tts", methods=["POST"])
def tts():
    try:
        text = request.json.get("text", "봄날의 바람")
        tts = gTTS(text, lang="ko")
        tts_path = tempfile.mktemp(suffix=".mp3")
        tts.save(tts_path)
        return send_file(tts_path, mimetype="audio/mpeg", as_attachment=True, download_name="tts.mp3")
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, use_reloader=True)
