from flask import Flask, send_file, render_template, request, jsonify
import tempfile
import os
from openai import OpenAI
from music21 import stream, note, midi, converter, environment
import pretty_midi
from gtts import gTTS
from dotenv import load_dotenv
load_dotenv()

us = environment.UserSettings()
us['musicxmlPath'] = 'C:/Program Files/MuseScore 4/bin/MuseScore4.exe'
us['musescoreDirectPNGPath'] = 'C:/Program Files/MuseScore 4/bin/MuseScore4.exe'

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/generate-lyrics", methods=["POST"])
def generate_lyrics():
    try:
        topic = request.json.get("topic", "사랑에 관한 노래")
        prompt = f"'{topic}'이라는 주제로 한국어 노래 가사를 써줘. 4줄 이상."
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        lyrics = response.choices[0].message.content.strip()
        return jsonify({"lyrics": lyrics})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/score", methods=["GET"])
def score():
    try:
        melody = stream.Stream()
        melody.append(note.Note('C4', quarterLength=1.0))
        melody.append(note.Note('D4', quarterLength=1.0))
        melody.append(note.Note('E4', quarterLength=1.0))
        melody.append(note.Rest(quarterLength=1.0))
        melody.append(note.Note('G4', quarterLength=2.0))
        png_path = tempfile.mktemp(suffix=".png")
        melody.write('musicxml.png', fp=png_path)
        return send_file(png_path, mimetype="image/png")
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
